//C++
class Solution {
    //this solution run less than O(n^2)
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
        unordered_map<int, int> myMap;
        for(int i = 0; i < nums.size(); ++i){
            myMap[nums[i]] = i;
        }
        for(int i = 0; i < nums.size(); ++i){
            int temp = target - nums[i];
            if(myMap.contains(temp) && myMap[temp] != i){
                result.push_back(i);
                result.push_back(myMap[temp]);
                break;
            }
        }
        return result;
    }
};

//C
//run in O(n^2)
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int *result = (int *) malloc(2 * sizeof(int));
    int i; 
    for(i = 0; i < numsSize; ++i){
        int j;
        for(j = i + 1; j < numsSize; ++j){
            if(nums[i] + nums[j] == target){
                result[0] = i;
                result[1] = j;
                *returnSize = 2;
                return result;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}
