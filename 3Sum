3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        std::sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; i++){
            if(i != 0 && (nums[i] == nums[i-1])){
                continue;
            }
            int target = 0 - nums[i];
            int j = i + 1;
            int k = nums.size() - 1;
            while(j < k){
                if((nums[j] + nums[k]) < target){
                    j++;
                }else if ((nums[j] + nums[k]) > target){
                    k--;
                }else{
                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[k]);
                    result.push_back(temp);
                    j++;
                    while(nums[j] == nums[j - 1] && j < k){
                        j++;
                    }
                }
            }
            
        }
        return result;
    }
};
